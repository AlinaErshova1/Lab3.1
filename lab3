import java.util.Scanner;

class MySet {
    public static Scanner in = new Scanner(System.in);
    double[] set = new double[0];

    public static double[] check(double[] set) {
        double[] m = new double[set.length];
        int ind = 0;
        for (int i = 0; i < set.length; i++) {
            for (int j = i + 1; j < set.length; j++) {
                if (set[i] != set[j]) {
                    m[ind] = set[i];
                    ind++;
                }
            }
        }
        return m;
    }


    public boolean in(double x) {
        int flag = 0;
        for (int i = 0; i < set.length; i++) {
            if (set[i] == x)
                flag++;
        }
        return flag == 1;
    }


    //Создание множества из чисел, вводимых с клавиатуры
    public MySet(int n) {
        double[] m = new double[n];
        for (int i = 0; i < n; i++)
            m[i] = in.nextInt();
        MySet.check(m);
    }

    //создание множества из пустого списка
    public MySet() {
        double[] st = new double[0];
        MySet.check(st);
    }

    //создание мн-ва из массива
    public MySet(double[] m) {
        double[] s = new double[m.length];
        for (int i = 0; i < m.length; i++)
            s[i] = m[i];
        MySet.check(s);
        ;
    }

    //Добавление элемента
    public void add(double x) {
        double[] s = new double[set.length + 1];
        for (int i = 0; i < set.length; i++)
            s[i] = set[i];
        s[set.length] = x;
        set = MySet.check(s);
        ;
    }

    //Удаление эл-та
    public void remove(double x) {
        int ind = 0;
        for (int i = 0; i < set.length; i++)
            if (set[i] == x)
                ind = i;
        double[] s = new double[set.length - 1];
        for (int i = 0; i < ind; i++)
            s[i] = set[i];
        for (int i = ind; i < set.length - 1; i++)
            s[i] = set[i + 1];
        set = MySet.check(s);
        ;
    }

    //Подсчёт количества элементов
    public int count() {
        return set.length;

    }


    //Объединение множеств
    public double[] union(double[] s1) {
        double[] s2 = MySet.check(s1);
        double[] m = new double[s2.length + set.length];
        for (int i = 0; i < s2.length; i++) {
            m[i] = s2[i];
        }
        for (int i = 0; i < set.length; i++) {
            m[i + s2.length] = set[i];
        }
        return MySet.check(m);
    }


    //Пересечение мн-тв
    public double[] intersection(double[] s1) {
        double[] s2 = MySet.check(s1);
        double[] m = new double[0];
        if (s2.length < set.length) {
            for (int i = 0; i < s2.length; i++) {
                if (new MySet(set).in(s2[i])) {
                    double[] newu = new double[m.length + 1];
                    for (int j = 0; j < m.length; j++)
                        newu[j] = m[j];
                    newu[m.length] = s2[i];
                    m = newu;
                }
            }
        } else {
            for (int i = 0; i < set.length; i++) {
                if (new MySet(s2).in(set[i])) {
                    double[] newu = new double[m.length + 1];
                    for (int j = 0; j < m.length; j++)
                        newu[j] = m[j];
                    newu[m.length] = set[i];
                    m = newu;
                }
            }
        }
        return m;
    }


    //симметрическая разность
    public MySet SymmetricDifference(MySet s1) {
        double[] inter = s1.intersection(set);
        double[] un = s1.union(set);
        double[] m = new double[un.length - inter.length];
        int ind = 0;
        for (int i = 0; i < un.length; i++) {
            if (!new MySet(inter).in(un[i])) {
                m[ind] = un[i];
                ind++;
            }
        }
        return new MySet(m);
    }

    //разность
    public void Difference(MySet s1) {
        double[] inter = s1.intersection(set);
        double[] m = new double[set.length - inter.length];
        int ind = 0;
        for (int i = 0; i < set.length; i++) {
            if (!new MySet(inter).in(set[i])) {
                m[ind] = set[i];
                ind++;
            }
        }
        set = MySet.check(m);
        ;
    }

    //сравнение
    public boolean equalQ(double[] s1) {
        double[] s2 = MySet.check(s1);
        ;
        if (s2.length != set.length)
            return false;
        else {
            int c = 0;
            for (int i = 0; i < set.length; i++) {
                if (new MySet(s1).in(set[i])) {
                    c++;
                }
            }
            return c == set.length;
        }
    }

    //проверка вложенности
    public String nested(double[] s1) {
        double[] s2 = MySet.check(s1);
        if (s2.length > set.length) {
            int c = 0;
            for (int i = 0; i < set.length; i++) {
                if (new MySet(s2).in(set[i]))
                    c++;
            }
            if (c == set.length)
                return "Текущее мн-во содержится в переданном";
            else
                return "Ни одно множество не содержится в другом";
        } else {
            int c = 0;
            for (int i = 0; i < s2.length; i++) {
                if (new MySet(set).in(s2[i]))
                    c++;
            }
            if (c == s2.length)
                return "Переданное мн-во содержится в текущем";
            else
                return "Ни одно множество не содержится в другом";
        }
    }

    @Override
    public String toString() {
        String output = "";
        if (set.length > 0) {
            output = String.format("%.2f", set[0]);
            for (int i = 1; i < set.length; i++)
                output += ", " + String.format("%.2f", set[i]);
        }
        return "{" + output + "}";
    }

}
